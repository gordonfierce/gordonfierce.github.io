<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Gordon Fierce</title><link href="http://gordonfierce.github.io/" rel="alternate"></link><link href="http://gordonfierce.github.io/feeds/all.atom.xml" rel="self"></link><id>http://gordonfierce.github.io/</id><updated>2015-07-15T00:00:00-04:00</updated><entry><title>Learning A Year Out</title><link href="http://gordonfierce.github.io/learning-a-year-out.html" rel="alternate"></link><published>2015-07-15T00:00:00-04:00</published><updated>2015-07-15T00:00:00-04:00</updated><author><name>Gordon Fierce</name></author><id>tag:gordonfierce.github.io,2015-07-15:learning-a-year-out.html</id><summary type="html">&lt;h2&gt;A startling discovery.&lt;/h2&gt;
&lt;p&gt;Yesterday I discovered something a little mind-blowing, but perhaps not for the reason you'd think. The determinant is a property of a matrix critical to much of linear algebra. Anyone in a linear algebra class has memorized the process of taking a determinant and cranked it out by hand for many matricies. If you want to calculate the inverse of a matrix, you're going to need to calculate a determinant.&lt;/p&gt;
&lt;p&gt;Oh, and my mind was blown yesterday when I learned that the process I've calculated by hand several dozen times is in fact just calculating the area of the parallelogram formed by the vectors of a 2x2 matrix, the area of the parallelopiped (think a 3D parallelogram) formed by a 3x3 matrix, and so on for square matrices of any side. Not only is this a delightful insight into the nature of the determinant, it was surprising to learn because I learned it while reading notes that &lt;em&gt;I myself had written years earlier.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I had once written out the entire process by which you calculate the area of a parallelogram and written out underneath it that this is a determinant. And then I forgot, but learned enough about determinants after the fact that I blew my own mind with the clarity of this thing that I really should have learned at some point. This is characteristic of my relationship with the four years I spent in school. I can't tell whether I learned something or not, whether everyone else figured things out without me, or whether my expectations are totally off base.&lt;/p&gt;
&lt;h2&gt;Someday I'm going to know this.&lt;/h2&gt;
&lt;p&gt;Every time I revisit things I'd studied at one point, I learn it all over again. And it makes more sense every time. Maybe I'll forget what a determinant really is again. But I know I understand it better now, sitting on my couch with Wikipedia, Metacademy, and twenty different other tabs open in Chrome, than I ever understood it while I was sitting in that classroom taking down notes. Which is unfortunate, because that was either the class I failed or the one I made a C in, and if you called up everybody that was in that class and asked them to identify the direct geometric analog of the determinant of a matrix, I'm not sure how many people would remember. Whatever, figuring things out is its own reward.&lt;/p&gt;</summary></entry><entry><title>Todo List Hacks</title><link href="http://gordonfierce.github.io/todo-list-hacks.html" rel="alternate"></link><published>2015-06-23T00:00:00-04:00</published><updated>2015-06-23T00:00:00-04:00</updated><author><name>Gordon Fierce</name></author><id>tag:gordonfierce.github.io,2015-06-23:todo-list-hacks.html</id><summary type="html">&lt;p&gt;{% notebook todos.ipynb %}&lt;/p&gt;</summary></entry><entry><title>Tips for Giving A Talk With IPython</title><link href="http://gordonfierce.github.io/tips-for-giving-a-talk-with-ipython.html" rel="alternate"></link><published>2015-06-15T00:00:00-04:00</published><updated>2015-06-15T00:00:00-04:00</updated><author><name>Gordon Fierce</name></author><id>tag:gordonfierce.github.io,2015-06-15:tips-for-giving-a-talk-with-ipython.html</id><summary type="html">&lt;p&gt;I recently gave a quick demo of some IPython magic functions that I thought the Greenville Iron Yard's Python class would find useful. The talk's available here.&lt;/p&gt;
&lt;h2&gt;Tips:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Converting an ipython notebook to Reveal.js slides is pretty great, but you might need to override IPython's default pager behavior. If you want to present anything that would normally display in the pager in your slides, you have to get the pager to print to regular output. 
&lt;code&gt;import IPython
IPython.core.page.page = IPython.core.page.display_page&lt;/code&gt; 
Importing IPython and assigning the default page function to &lt;code&gt;display_page&lt;/code&gt; will do just that.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>What do I do next?</title><link href="http://gordonfierce.github.io/what-do-i-do-next.html" rel="alternate"></link><published>2015-05-17T00:00:00-04:00</published><updated>2015-05-17T00:00:00-04:00</updated><author><name>Gordon Fierce</name></author><id>tag:gordonfierce.github.io,2015-05-17:what-do-i-do-next.html</id><summary type="html">&lt;p&gt;It's not that I don't know what I want to do, it's that I don't know where to start.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the tradition of recursive self-improvement, I might have to build out a lightweight set of tools to help manage my todo.txt. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I want to learn some C and C++. Key resources: Learn C the Hard Way, ThinkOS, &lt;a href="http://www.greenteapress.com/thinkcpp/index.html"&gt;Think Like A Computer Scientist: C++ Edition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Think Bayes, Think Stats, and the like all seem fun.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work through the canon &lt;a href="https://docs.djangoproject.com/en/1.8/"&gt;Django tutorials&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn more vim.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Testing Bokeh</title><link href="http://gordonfierce.github.io/testing-bokeh.html" rel="alternate"></link><published>2015-04-20T00:00:00-04:00</published><updated>2015-04-20T00:00:00-04:00</updated><author><name>Gordon Fierce</name></author><id>tag:gordonfierce.github.io,2015-04-20:testing-bokeh.html</id><summary type="html">&lt;p&gt;{% notebook ../../../src/notebooks/bokeh_test_drive.ipynb %}&lt;/p&gt;</summary></entry><entry><title>Traffic Simulation</title><link href="http://gordonfierce.github.io/traffic-simulation.html" rel="alternate"></link><published>2015-04-18T00:00:00-04:00</published><updated>2015-04-18T00:00:00-04:00</updated><author><name>Gordon Fierce</name></author><id>tag:gordonfierce.github.io,2015-04-18:traffic-simulation.html</id><summary type="html">&lt;p&gt;The following code and related source can be found &lt;a href="http://github.com/gordonfierce/traffic-simulation"&gt;in this repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;{% notebook ../../../ironyard/traffic-simulation/results.ipynb %}&lt;/p&gt;</summary></entry><entry><title>Classifying Programming Languages</title><link href="http://gordonfierce.github.io/classifying-programming-languages.html" rel="alternate"></link><published>2015-04-16T00:00:00-04:00</published><updated>2015-04-16T00:00:00-04:00</updated><author><name>Gordon Fierce</name></author><id>tag:gordonfierce.github.io,2015-04-16:classifying-programming-languages.html</id><summary type="html">&lt;p&gt;{% notebook ../../../ironyard/programming-language-classifier/classification.ipynb %}&lt;/p&gt;</summary></entry><entry><title>Crunching Weight Data</title><link href="http://gordonfierce.github.io/crunching-weight-data.html" rel="alternate"></link><published>2015-04-16T00:00:00-04:00</published><updated>2015-04-16T00:00:00-04:00</updated><author><name>Gordon Fierce</name></author><id>tag:gordonfierce.github.io,2015-04-16:crunching-weight-data.html</id><summary type="html">&lt;p&gt;{% notebook weight.ipynb %}&lt;/p&gt;</summary></entry><entry><title>Fun Ideas Made Tractable by Python</title><link href="http://gordonfierce.github.io/fun-ideas-made-tractable-by-python.html" rel="alternate"></link><published>2015-03-31T17:00:00-04:00</published><updated>2015-03-31T17:00:00-04:00</updated><author><name>Gordon Fierce</name></author><id>tag:gordonfierce.github.io,2015-03-31:fun-ideas-made-tractable-by-python.html</id><summary type="html">&lt;p&gt;Thanks to the numpy/pandas/iPython/matplotlib combination (with other fun libraries like scikit-learn or nltk), it is really easy to do your own data analysis with Python. Wielding these tools, I'm crunching through some of my personal data, pulled from a number of sources.&lt;/p&gt;
&lt;p&gt;I've been tracking my weight on Beeminder for over a year and a half, but that's really an abuse of Beeminder. I haven't been keeping myself to any kind of goal, only using their really slick graphing implementation.&lt;/p&gt;
&lt;p&gt;Speaking of Beeminder, I've also been tracking myself using TagTime. TagTime randomly samples you over time and asks you to select binary tags of your own choosing.&lt;/p&gt;
&lt;p&gt;I've also used Paco, to track self-reported mood, energy, and productivity. And my location. And whether I was sitting, standing, walking, or reclining. And whether I was in public.&lt;/p&gt;
&lt;p&gt;I'd like to get some form of kelogging working soon, but I've not been able to run Selfspy successfully yet.&lt;/p&gt;</summary></entry><entry><title>Hello World</title><link href="http://gordonfierce.github.io/hello-world.html" rel="alternate"></link><published>2015-03-26T19:33:00-04:00</published><updated>2015-03-26T19:33:00-04:00</updated><author><name>Gordon Fierce</name></author><id>tag:gordonfierce.github.io,2015-03-26:hello-world.html</id><summary type="html">&lt;p&gt;I seem to have gotten Pelican working.&lt;/p&gt;</summary></entry></feed>